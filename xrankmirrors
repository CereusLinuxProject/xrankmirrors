#!/usr/bin/env bash
## credits to https://paste.sh/1QS8Tgf6#aHTfRy1dOG4rcA5x_6kauwq3

arch=$(xbps-uhelper arch)
cachedir="/var/cache/xrankmirrors"
void_file="$cachedir/void-results"
cereus_file="$cachedir/cereus-results"
VERSION="0.1.0"
region_sel="ALL"
unranked=""
voidnsrun_container=""
CLI_BOLD=$(tput bold)
CLI_RESET=$(tput sgr0)
dialog_conf="/tmp/xrankmirrors-dialogrc"

RED="\Z1"
WHITE="\Z7"
BOLD="\Zb"
RESET="\Zn"

cat > "$dialog_conf" <<EOF
use_scrollbar = ON
use_shadow = OFF
use_colors = ON
screen_color = (WHITE,BLACK,OFF)
shadow_color = (BLACK,BLACK,ON)
dialog_color = (WHITE,BLACK,OFF)
title_color = (WHITE,BLACK,OFF)
border_color = (WHITE,BLACK,OFF)
button_active_color = (WHITE,BLUE,ON)
button_inactive_color = dialog_color
button_key_active_color = button_active_color
button_key_inactive_color = (RED,WHITE,OFF)
button_label_active_color = (YELLOW,BLUE,ON)
button_label_inactive_color = (BLACK,WHITE,ON)
inputbox_color = dialog_color
inputbox_border_color = dialog_color
searchbox_color = dialog_color
searchbox_title_color = title_color
searchbox_border_color = border_color
position_indicator_color = title_color
menubox_color = dialog_color
menubox_border_color = border_color
item_color = dialog_color
item_selected_color = button_active_color
tag_color = title_color
tag_selected_color = button_label_active_color
tag_key_color = button_key_inactive_color
tag_key_selected_color = (RED,BLUE,ON)
check_color = dialog_color
check_selected_color = button_active_color
uarrow_color = (GREEN,WHITE,ON)
darrow_color = uarrow_color
itemhelp_color = (WHITE,BLACK,OFF)
form_active_text_color = button_active_color
form_text_color = (WHITE,CYAN,ON)
form_item_readonly_color = (CYAN,WHITE,ON)
gauge_color = title_color
border2_color = dialog_color
inputbox_border2_color = dialog_color
searchbox_border2_color = dialog_color
menubox_border2_color = dialog_color
EOF

if [ "$EUID" -ne 0 ]; then
    echo "Must run as superuser, exiting..."; exit 1
fi

if [ ! -e "$cachedir" ]; then
    mkdir -p "$cachedir"
fi

fetch_mirrorlist() {
    case "$rank" in
        void) 
            mirrorlist_file="https://xmirror.voidlinux.org/raw/mirrors.lst"
            mirrorlist="$(curl -s $mirrorlist_file | tail -n +3 | sed 's|USA|U.S.A.|g')"
            distname="Void"
            ;;
        cereus)
            mirrorlist_file="https://raw.githubusercontent.com/CereusLinuxProject/xrankmirrors/main/mirrorlist.lst"
            mirrorlist="$(curl -s $mirrorlist_file | tail -n +2)"
            distname="Cereus"
            ;;
    esac

    if [ "$region_sel" = "ALL" ]; then
        echo "$mirrorlist"
    elif n=$(echo "$mirrorlist" | grep -q "$region_sel"); then
        echo "$mirrorlist" | grep $region_sel
    else
        if [ "$GUI_ENABLE" = "1" ]; then
           yad --image dialog-warning --title "Warning" --text-width=20 --button=yad-ok --timeout=10 --text "$distname Linux does not have mirrors in the selected region, falling back to World." 
        else
            #DIALOG --title "${BOLD}Warning${RESET}" --msgbox "${BOLD}$distname Linux does not have mirrors in the selected region, falling back to World.${RESET}" 8 50
            echo "hola mundo" >/dev/null
        fi
       
        echo "$mirrorlist" | grep "World"
    fi
}

progressfilt ()
{
    local flag=false c count cr=$'\r' nl=$'\n'
    while IFS='' read -d '' -rn 1 c
    do
        if $flag
        then
            printf '%s' "$c"
        else
            if [[ $c != $cr && $c != $nl ]]
            then
                count=0
            else
                ((count++))
                if ((count > 1))
                then
                    flag=true
                fi
            fi
        fi
    done
}

run_ranks() {
    clear

    if [ "$rank_cereus" = "1" ]; then
        rank_list="void cereus"
    else
		echo "$rank_cereus"
        rank_list="void"
    fi

    for rank in $rank_list; do
        case "$rank" in
            void)
                cli_msg="Getting Void mirrors from xmirror repository..."
                results_file="$void_file"
                columns="region mirror loc tier rest"
				if [ "$arch" = "x86_64" ] || [ "$arch" = "i686" ]; then
					pkg_prefix="current"
				elif [ "$arch" = "x86_64-musl" ]; then
					pkg_prefix="current/musl"
				fi
				pkg="$pkg_prefix/$(xbps-query -R -S 2048-qt | grep pkgver | cut -d' ' -f2).$arch.xbps"
                ;;
            cereus)
                cli_msg="Getting Cereus mirrors from xrankmirrors repository..."
                results_file="$cereus_file"
                columns="region mirror loc tier provider"
                pkg="cereus-extra/$arch/$(xbps-query -R -S xidlehook | grep pkgver | cut -d' ' -f2).$arch.xbps"
                ;;
         esac

        printf '%s\n' "${CLI_BOLD}=> $cli_msg ${CLI_RESET}" ''
        #echo -e "${CLI_BOLD}=> $cli_msg ${CLI_RESET}\n"
	    if [ -e "$results_file" ]; then
            rm "$results_file"
        fi

	    while IFS=$'\t' read -r $columns; do
            case "$region" in
			    \#*) ;;
                *) 
                    case "$mirror" in
                        Tier*) ;;
                        \#*) ;;
                        *)
                            case "$loc" in 
                                1) ;;
                                2) ;;
                                3) ;;
                                *)
                                    loc="${loc%%,*}"
						            printf '%s\n' "${CLI_BOLD}$mirror${CLI_RESET}"
						            #dlspeed="$(curl -L -Y 1048576 -# -w "%{speed_download}" "$mirror_cereus/$cereus_pkg" -o/dev/null)"
                                    if [ "$unranked" = "1" ]; then
                                        case $rank in
                                            void)
                                                echo "${mirror},${region},${loc// /_},$(echo ${tier} | grep -o '[0-9]*')" >> "$results_file" ;;
                                            cereus)
                                                echo "${mirror},${region},${loc},${tier},${provider}" >> "$results_file" ;;
                                        esac
                                    else
                                        exec 5>&1
                                        #echo "$mirror/$pkg"
                                        dlspeed=$(wget -O /dev/null "$mirror/$pkg" --tries 3 --timeout 20 --progress=bar:force:noscroll 2>&1 | progressfilt | tee >(cat - >&5))
                                        dlspeed="$(echo $dlspeed | grep '\([0-9.]\+ [KMG]B/s\)' -o | sed 's| ||g' | sed 's|B/s||g' | numfmt --from=iec)"
	        					        connect=$(printf "%.2fs" "$(curl --connect-timeout 2 -sw "%{time_appconnect}" "$mirror" -o/dev/null)")

                                        case $rank in
                                            void)
                                                echo "${mirror},${region},${loc// /_},$(echo ${tier} | grep -o '[0-9]*'),${dlspeed},${connect}" >> "$results_file" ;;
                                            cereus)
                                                echo "${mirror},${region},${loc},${tier},${provider},${dlspeed},${connect}" >> "$results_file" ;;
                                        esac
                                    fi
					                ;;
                            esac
                                ;;
                    esac
                        ;;
            esac
	    done <<< "$(fetch_mirrorlist)"
    done
    format
}

get_fastests() {
        echo ""
        echo "${CLI_BOLD}Fastest mirrors:${CLI_RESET}"
        cereus_mirror=$(cat "$cereus_file" | sed -n '2p' | cut -d',' -f2 | cut -d' ' -f1)
        void_mirror=$(cat "$void_file" | sed -n '2p' | cut -d',' -f2 | cut -d' ' -f1)
        echo "${CLI_BOLD}Cereus${CLI_RESET}: $cereus_mirror
${CLI_BOLD}Void${CLI_RESET}: $void_mirror"
}

format() {
    if [ "$rank_cereus" = "1" ]; then
        results_files="$void_file $cereus_file"
    else
        results_files="$void_file"
    fi

    if [ "$unranked" = "1" ]; then
        for results in $results_files; do
            case $results in
                "$void_file") sorted_results=$(cat "$results" | sed '1s/^/Mirror,Region,Location,Tier\n/' | column -s, -t);;
                "$cereus_file") sorted_results=$(cat "$results" | sed '1s/^/Mirror,Region,Location,Tier,Provider\n/' | column -s, -t);;
            esac
            printf "%s" "$sorted_results" > "$results"
        done
    else
        for results in $results_files; do
            case $results in
                "$void_file") sorted_results=$(sort -t, -nrk5 < "$results" | numfmt -d , --field 5 --to=iec --suffix=B/s | sed '1s/^/Mirror,Region,Location,Tier,Download-Speed,Connect\n/' | column -s, -t);;
                "$cereus_file") sorted_results=$(sort -t, -nrk6 < "$results" | numfmt -d , --field 6 --to=iec --suffix=B/s | sed '1s/^/Mirror,Region,Location,Tier,Provider,Download-Speed,Connect\n/' | column -s, -t);;
            esac
            #printf "%s" "$sorted_results"
            printf "%s" "$sorted_results" > "$results"
            #cat "$results" | sed '1 d' | tee "$results"
        done
    fi
}

set_fastests() {

    if [ ! -e $cereus_file ] || [ ! -e $void_file ]; then
        run_ranks
    fi

    get_fastests
    change_mirror
}

print_results() {

    separator="==================================================="
    echo -e "${CLI_BOLD}Void Linux mirrors\n$separator${CLI_RESET}"
    cat $void_file
    echo -e "\n"
    
    echo -e "${CLI_BOLD}Cereus Linux mirrors\n$separator${CLI_RESET}"
    cat $cereus_file
    echo -e "\n"
    get_fastests
}

region_prompt() {

    if [ "$GUI_ENABLE" = "1" ]; then
        prompt=$(yad \
            --window-icon="configurator" \
            --text="Select your region" \
            --height="310" \
            --width="300" \
            --separator="" \
            --list \
            --title "Cereus Linux Mirror Selector" \
            --radiolist \
            --column "" \
            --column "ID" \
            --column "Option" \
            --print-column 2 \
            FALSE "AS" "Asia" \
            FALSE "EU" "Europe" \
            FALSE "NA" "North America" \
            FALSE "OC" "Oceania" \
            FALSE "SA" "South and Central America" \
            FALSE "World" "Globally available" \
            FALSE "ALL" "All mirrors available")
    else
        prompt=$(echo -e "AS - Asia\nEU - Europe\nNA - North America\nOC - Oceania\nSA - South and Central America\nWorld - Globally Available\nALL - All mirrors available" | fzf --layout=reverse --border --border-label="Select your region" | awk -F' ' '{ print $1 }')
    fi
            # Currently there are no mirrors in Africa
            # FALSE "AF" "Africa" \
            # AF - Africa (only Cereus mirrors)\n

        if [ "$prompt" = "" ]; then
            #region_prompt
            exit 1
        fi

        case $prompt in
            ALL) ;;
            *) region_sel="$prompt";;
        esac
}

DIALOG() {
    DIALOGRC="$dialog_conf" dialog --colors --keep-tite --no-shadow --no-mouse \
        --backtitle "${BOLD}${WHITE}Cereus Linux Mirror Selector -- https://CereusLinuxProject.github.io (v${VERSION})${RESET}" \
        --cancel-label "Back" --aspect 20 "$@"
    return $?
}

interactive() {
    detect_removed_mirrors

    # dialog colors

    VOIDMSG=$(fold -sw 76 <<EOF

For the best experience, choose a mirror geographically close to you, or use the Fastly Global CDN (listed in ${BOLD}World${RESET}).

Tier 1 mirrors are maintained by the Void Linux Infrastructure Team and will always have the latest packages available. Tier 2 mirrors are not managed by Void and do not have any guarantees of freshness or completeness of packages, nor are they required to sync every available architecture or sub-repository.
EOF
)

    CEREUSMSG=$(fold -sw 76 <<EOF

${BOLD}Tier 1${RESET} mirrors have all the packages available in both ${BOLD}cereus-extra${RESET} and ${BOLD}cereus-core${RESET} repositories and will always have the latest packages available. 

${BOLD}Tier 2${RESET} mirrors are limited at ~150MB size on packages, and ${BOLD}Tier 3${RESET} mirrors are limited at 100MB. This make some heavy packages unavailable in them (${BOLD}OnlyOffice${RESET} for tier 2, ${BOLD}Brave${RESET} and ${BOLD}Heroic${RESET} for tier 3). You can choose them ${BOLD}only if you are ok with that${RESET}.
EOF
)

    if [ "$GUI_ENABLE" = "1" ]; then
            initial_prompt=$(yad \
        --window-icon="configurator" \
        --text="What would you like to do?" \
        --height="230" \
        --width="400" \
        --separator="" \
        --print-column 2 \
        --hide-column 2 \
        --list \
        --title "Cereus Linux Mirror Selector" \
        --radiolist \
        --column "" \
        --column "ID" \
        --column "Option" \
        TRUE 1 "Select and change mirrors (without ranking)" \
        FALSE 2 "Rank available mirrors and select mirrors" \
        FALSE 3 "Reset to the default mirrors" \
        FALSE 4 "Exit this wizard")
    else
        initial_prompt=$(echo -e "1 - Select and change mirrors (without ranking)\n2 - Rank available mirrors and select mirrors\n3 - Reset to the default mirrors\n4 - Exit this wizard" | fzf --layout=reverse --border --border-label="What would you like to do?" | awk -F' ' '{ print $1 }')
    fi


    if [ "$initial_prompt" = "1" ]; then
        region_prompt
        unranked="1"
        run_ranks
        select_mirror
    elif [ "$initial_prompt" = "2" ]; then
        region_prompt
        unranked="0"
        run_ranks
        select_mirror
    elif [ "$initial_prompt" = "3" ]; then
        rm /etc/xbps.d/*{cereus,repository}*
        echo "${CLI_BOLD}=> Updating XBPS repositories database...${CLI_RESET}"
        xbps-install -S
        exitstatus=$?
        if [ $exitstatus = 0 ]; then
            DIALOG --title "${BOLD}Information${RESET}" --msgbox "${BOLD}Mirrors changed succesfully!${RESET}" 5 40
            exit 0    
        else
            DIALOG --title "${BOLD}Information${RESET}" --msgbox "${BOLD}Something went wrong. Couldn't change mirrors...!${RESET}" 5 40
            exit 1
        fi
        
    elif [ "$initial_prompt" = "4" ]; then
        exit 0
    else 
        exit 1
    fi

    change_mirror
}

select_mirror() {
    if [ "$rank_cereus" = "1" ]; then
        select_list="void cereus"
    else
        select_list="void"
    fi

    if [ "$GUI_ENABLE" = "1" ]; then
        yad --title="Important note about Cereus Linux mirrors" --info --text "$CEREUSMSG"

        if [ "$unranked" = "1" ]; then
            cereus_mirror=$(yad --list \
                --separator="" \
                --print-column 2 \
                --text="Please select a mirror for Cereus Linux repositories" \
                --width=900 \
                --height=200 \
                --title "Cereus Linux Mirror Selector" --window-icon="configurator" \
                --radiolist \
                --column "" \
                --column "Mirror" \
                --column "Region" \
                --column "Location" \
                --column "Tier" \
                --column "Provider" \
                $(sed -e 's/^/FALSE /' $cereus_file | tail +2))

            yad --title="Important note about Void Linux mirrors" --info --text "$(echo -e $VOIDMSG | sed 's|'"${BOLD}"'|<b>|g' | sed 's|'"${RESET}"'|</b>|g')"

            void_mirror=$(yad --list \
                --separator="" \
                --print-column 2 \
                --text="Please select a mirror for Void Linux repositories" \
                --width=700 \
                --height=300 \
                --title "Cereus Linux Mirror Selector" --window-icon="configurator" \
                --radiolist \
                --column "" \
                --column "Mirror" \
                --column "Region" \
                --column "Location" \
                --column "Tier" \
                $(sed -e 's/^/FALSE /' $void_file | tail +2))
            else
                cereus_mirror=$(yad --list \
                    --separator="" \
                    --print-column 2 \
                    --text="Please select a mirror for Cereus Linux repositories" \
                    --width=1100 \
                    --height=200 \
                    --title "Cereus Linux Mirror Selector" --window-icon="configurator" \
                    --radiolist \
                    --column "" \
                    --column "Mirror" \
                    --column "Region" \
                    --column "Location" \
                    --column "Tier" \
                    --column "Provider" \
                    --column "Download Speed" \
                    --column "Connect" \
                    $(sed -e 's/^/FALSE /' $cereus_file | tail +2))

                    yad --title="Important note about Void Linux mirrors" --info --text "$VOIDMSG"

                    void_mirror=$(yad --list \
                        --separator="" \
                        --print-column 2 \
                        --text="Please select a mirror for Void Linux repositories" \
                        --width=1100 \
                        --height=300 \
                        --title "Cereus Linux Mirror Selector" --window-icon="configurator" \
                        --radiolist \
                        --column "" \
                        --column "Mirror" \
                        --column "Region" \
                        --column "Location" \
                        --column "Tier" \
                        --column "Download Speed" \
                        --column "Connect" \
                        $(sed -e 's/^/FALSE /' $void_file | tail +2))
                    fi
    else
            DIALOG --title "${BOLD} Important note about Cereus Linux mirrors ${RESET}" --msgbox "$CEREUSMSG" 15 80
            cereus_mirror=$(cat $cereus_file | fzf --layout=reverse --header-lines=1 --border --border-label="Please select a mirror for Cereus repositories" | awk -F' ' '{ print $1 }')
            DIALOG --title "${BOLD} Important note about Void Linux mirrors ${RESET}" --msgbox "$VOIDMSG" 15 80
            void_mirror=$(cat $void_file | fzf --layout=reverse --header-lines=1 --border --border-label="Please select a mirror for Void repositories" | awk -F' ' '{ print $1 }')
    fi


}

change_mirror() {
    if [ ! -e "/etc/xbps.d/" ]; then
        mkdir -p "/etc/xbps.d/"
    fi

    if [ "$rank_cereus" = "1" ]; then
        mirrors="$cereus_mirror $void_mirror"
    else
        mirrors="$void_mirror"
    fi

    # If there is a voidnsrun glibc container, also apply changes for it.
    if [ -e /glibc/usr/share/xbps.d ]; then
        container="1"
        syspath="/ /glibc"
        if [ ! -e "/glibc/etc/xbps.d" ]; then
            mkdir -p "/glibc/etc/xbps.d"
        fi
    else
        container="0"
        syspath="/"
    fi

    for path in $syspath; do

    case $path in
        "/") 
            sync_repos_cmd="xbps-install -S" 
            sysname="host system"
             ;;
        "/glibc") 
            sync_repos_cmd="xchroot /glibc xbps-install -S"
            sysname="container system"
            ;;
    esac
                    

        for mirror in $mirrors; do
            case $mirror in
                "$void_mirror")
                    default_mirror="https://repo-default.voidlinux.org/"
                    mirror_file="*repository*.conf"
                    ;;
                "$cereus_mirror")
                    default_mirror="https://sourceforge.net/projects/cereus-linux/files/repos/"
                    mirror_file="*cereus*.conf"
                    ;;
            esac

            cp $path/usr/share/xbps.d/$mirror_file $path/etc/xbps.d/
            sed -i 's|'"$default_mirror"'|'"$mirror"'|g' $path/etc/xbps.d/$mirror_file
        done

        # Test if selected mirror has debug repository
        if [ -e /usr/share/xbps.d/20-repository-debug.conf ]; then
            debug_repo=$(cat $path/etc/xbps.d/20-repository-debug.conf | cut -d"=" -f2)
            if ! (wget --spider "$debug_repo/$arch-repodata" 2>/dev/null); then
                echo "Selected mirror does not have debug repository for $sysname, falling back to default"
                rm $path/etc/xbps.d/20-repository-debug.conf
            fi
        fi

        clear
        echo "${CLI_BOLD}=> Updating XBPS repositories database in $sysname...${CLI_RESET}"
        eval "$sync_repos_cmd"
    done
    [ $? = 0 ] && DIALOG --title "Success" --msgbox "${BOLD}=> Mirrors changed succesfully!${RESET}" 5 40
}

detect_removed_mirrors() {
    local to_reset

    if [ -e /glibc/etc/xbps.d ]; then
        repo_file_list="$(find /{,glibc/}etc/xbps.d/*cereus*.conf | tr '\n' ' ')"
        sync_repos_cmd="xchroot /glibc xbps-install -S; xbps-install -S"
    else
        repo_file_list="/etc/xbps.d/*cereus*.conf"
        sync_repos_cmd="xbps-install -S"
    fi

    if [ -e /etc/xbps.d/10-cereus-core.conf ] || [ -e /etc/xbps.d/10-cereus-extra.conf ]; then
        for repo_file in $repo_file_list; do
            current_mirror="$(cat "$repo_file" | cut -d '=' -f2 | sed 's|repos/cereus-.*|repos/|g')"
            removed_mirrorlist="$(curl -s https://raw.githubusercontent.com/CereusLinuxProject/xrankmirrors/main/removed-mirrors.lst | tail -n +2)"
            if n=$(echo "$removed_mirrorlist" | grep -q -o "$current_mirror"); then
                reset_cereus_mirrors="1"
                to_reset="$to_reset $repo_file"
            else
                reset_cereus_mirrors="0"
                to_reset=""
            fi
        done

        if [ "$reset_cereus_mirrors" = "1" ]; then
            if [ "$GUI_ENABLE" = "1" ]; then
                yad --image dialog-warning --window-icon dialog-warning --title "Warning" --text-width=80 --button=yad-ok --timeout=10 --text "Your active Cereus Linux mirror was removed from the official mirrorlist. This means it's no longer operative! \n\nReseting to default mirror!" 
            else
                DIALOG --title "${BOLD}Warning${RESET}" --msgbox "Your active Cereus Linux mirror was removed from the official mirrorlist. This means it's no longer operative! \n\n${BOLD}Reseting to default mirror!${RESET}" 10 60
            fi
            rm $to_reset
            eval "$sync_repos_cmd"
        fi      
    fi
}

help() {
cat <<EOF 
    usage: ${0##*/} [-c URL] [-f] [-g] [-h] [-i] [-c URL -v URL -m] [-r REGION] [-s] [-v URL]
      -c   Set Cereus mirror (only for -m)
      -f   Print last rank results
      -g   Rank Void & Cereus mirrors and print results
      -h   Show this help
      -i   Manually change mirrors in interactive mode
      -m   Manually change mirrors on non-interactive mode (requires -v and/or -c)
      -r   Rank/list only specified region mirrors (valid options: AF,AS,EU,NA,OC,SA,World)
      -s   Set fastest mirrors from previous results
      -u   Manually change mirrors in GUI interactive mode.
      -v   Set Void mirror (only for -m)

    files: $void_file $cereus_file
EOF
}

if [ -z "$1" ]; then
    help; exit 1
fi

while getopts "c:fghimr:suv:" opt; do
case $opt in
    c) cereus_mirror="$OPTARG" ;;
    f) print_results ;;
    g) rank_cereus="1"; unranked="0"; run_ranks; print_results ;;
    h) help; exit 1;;
    i) rank_cereus="1"; GUI_ENABLE="0"; interactive;;
    m) change_mirror;;
    r) region_sel="$OPTARG";;
    s) set_fastests;;
    u) rank_cereus="1"; GUI_ENABLE="1"; interactive;;
    v) void_mirror="$OPTARG";;
    *) help; exit 1;;
esac
done
shift $((OPTIND - 1))

